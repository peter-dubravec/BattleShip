!function(){var t={169:function(t){t.exports=function(t){t?document.querySelector(".gameBoardcomputer").remove():document.querySelector(".gameBoardplayer").remove()}},325:function(t){t.exports=function(){document.querySelector(".gameBoardplayer").remove()}},923:function(t){t.exports=function(){document.querySelector(".winner").remove()}},756:function(t){t.exports=function(t){var e=document.createElement("p");e.className="winner",e.textContent=t?"Congratulations! You won!":"Enemy won!",document.querySelector(".buttonrestart").style.display="block",document.querySelector("main").append(e),Array.from(document.querySelectorAll(".divRowcomputer")).forEach((function(t){t.classList.remove("divRowcomputer"),t.classList.add("divRow-nohover")}))}},890:function(t){t.exports=function(t,e){var n=document.createElement("div");n.classList.add("gameBoard"+t,"gameBoard");for(var r=function(r){var o=document.createElement("div");o.classList.add("divColumn"+t,"divColumn");for(var a=function(n){var a=document.createElement("div");a.setAttribute("data-coordinates",[n,r]),a.classList.add("divRow"+t,"divRow"),"player"==t&&e.flat().some((function(t){return t[0]==n&&t[1]==r}))&&(a.classList.add("ship","divRow-nohover"),a.classList.remove("divRow")),o.appendChild(a)},i=0;i<10;i++)a(i);n.insertBefore(o,n.firstChild)},o=0;o<10;o++)r(o);"player"==t?document.querySelector(".rightplayer").append(n):document.querySelector(".rightcomputer").append(n)}},506:function(t){t.exports={renderMissedShot:function(t,e){document.querySelector(".divRow".concat(t,'[data-coordinates="').concat(e,'"]')).classList.add("missedshot")},renderHit:function(t,e){document.querySelector(".divRow".concat(t,'[data-coordinates="').concat(e,'"]')).classList.add("hit")}}},778:function(t,e,n){function r(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(t);!(i=(r=n.next()).done)&&(a.push(r.value),!e||a.length!==e);i=!0);}catch(t){c=!0,o=t}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(t,e)||a(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=a(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,c=!0,u=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return c=t.done,t},e:function(t){u=!0,i=t},f:function(){try{c||null==n.return||n.return()}finally{if(u)throw i}}}}function a(t,e){if(t){if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(t,e):void 0}}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var c=n(536),u=n(890),s=n(325),f=n(756),l=n(169),d=n(923),p=n(506),v=p.renderMissedShot,m=p.renderHit;t.exports=function(t){var e=[],n=[],a=[],i=function(){for(var t=0;t<=9;t++)for(var e=0;e<=9;e++)a.push([e,t])},p=function(){return n.map((function(t){return t.coordinates}))},h=function(){return e.length==n.length&&(console.log(!0),f(t),!0)},y=function t(e){var n,r,o,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],c=JSON.stringify(a);0==i.length?(n=Math.floor(Math.random()*a.length),r=a[n]):i.forEach((function(t){o=a.filter((function(e){return e[0]!=t[0]||e[1]!=t[1]})),n=Math.floor(Math.random()*o.length),r=o[n]}));for(var u=0;u<e;u++){var s=JSON.stringify([r[0],r[1]+u]);if(i.push(r),-1==c.indexOf(s))return t(e,i)}for(var f=function(t){a=(a=(a=a.filter((function(e){return r[0]!=e[0]||r[1]+t!=e[1]}))).filter((function(e){return r[0]+1!=e[0]||r[1]+t!=e[1]}))).filter((function(e){return r[0]-1!=e[0]||r[1]+t!=e[1]}))},l=-1;l<e+1;l++)f(l);return[r[0],r[1]]},g=function t(e){var n,r,o,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],c=JSON.stringify(a);0==i.length?(n=Math.floor(Math.random()*a.length),r=a[n]):i.forEach((function(t){o=a.filter((function(e){return e[0]!=t[0]||e[1]!=t[1]})),n=Math.floor(Math.random()*o.length),r=o[n]}));for(var u=0;u<e;u++){var s=JSON.stringify([r[0]+u,r[1]]);if(i.push(r),-1==c.indexOf(s))return t(e,i)}for(var f=function(t){a=(a=(a=a.filter((function(e){return r[0]+t!=e[0]||r[1]!=e[1]}))).filter((function(e){return r[0]+t!=e[0]||r[1]+1!=e[1]}))).filter((function(e){return r[0]+t!=e[0]||r[1]-1!=e[1]}))},l=-1;l<e+1;l++)f(l);return console.log(r[0]),[r[0],r[1]]},b=function(){var t,e,a,i=["horizontal","vertical"],u=o([c(4),c(3),c(3),c(2),c(2),c(2),c(1),c(1),c(1),c(1)]);try{for(u.s();!(a=u.n()).done;){var s=a.value,f=Math.floor(2*Math.random()),l=[];switch(i[f]){case"horizontal":var d=r(g(s.length),2);t=d[0],e=d[1];for(var p=0;p<s.length;p++)l.push([t+p,e]);n.push({ship:s,coordinates:l});break;case"vertical":var v=r(y(s.length),2);t=v[0],e=v[1];for(var m=0;m<s.length;m++)l.push([t,e+m]);n.push({ship:s,coordinates:l})}}}catch(t){u.e(t)}finally{u.f()}};return i(),b(),u(t?"computer":"player",p()),{recieveAttack:function(t,r){var a,i=o(n);try{for(i.s();!(a=i.n()).done;){var c,u=a.value,s=o(u.coordinates);try{for(s.s();!(c=s.n()).done;){var f=c.value;if(f[0]==t[0]&&f[1]==t[1])return"Ship sunked"==u.ship.hit()&&e.push(u),m(r?"computer":"player",t),void h()}}catch(t){s.e(t)}finally{s.f()}}}catch(t){i.e(t)}finally{i.f()}return v(r?"computer":"player",t)},randomize:function(){n=[],a=[],i(),b(),s(),u("player",p())},restart:function(){e=[],n=[],a=[],d(),i(),b(),l(t),u(t?"computer":"player",p())},checkGameEnd:h}}},246:function(t,e,n){var r=n(778);t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=r(t),n=[];if(1==t)for(var o=0;o<=9;o++)for(var a=0;a<=9;a++)n.push([a,o]);function i(){var t=Math.floor(Math.random()*n.length);return n.splice(t,1).flat()}var c=function(e,n){if(1!=t)e.gameBoard.recieveAttack(n,e.isComputer);else{var r=i();e.gameBoard.recieveAttack(r,e.isComputer)}};return{attack:c,gameBoard:e,isComputer:t}}},536:function(t){t.exports=function(t){var e=0;return{hit:function(){if((e+=1)>=t)return"Ship sunked"},length:t}}},495:function(t,e,n){"use strict";var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,"// extracted by mini-css-extract-plugin\nexport {};","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;QACQ,CAAA",sourcesContent:["// extracted by mini-css-extract-plugin\nexport {};"],sourceRoot:""}]),e.Z=i},645:function(t){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var u=this[c][0];null!=u&&(i[u]=!0)}for(var s=0;s<t.length;s++){var f=[].concat(t[s]);r&&i[f[0]]||(void 0!==a&&(void 0===f[5]||(f[1]="@layer".concat(f[5].length>0?" ".concat(f[5]):""," {").concat(f[1],"}")),f[5]=a),n&&(f[2]?(f[1]="@media ".concat(f[2]," {").concat(f[1],"}"),f[2]=n):f[2]=n),o&&(f[4]?(f[1]="@supports (".concat(f[4],") {").concat(f[1],"}"),f[4]=o):f[4]="".concat(o)),e.push(f))}},e}},537:function(t){"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},692:function(t,e,n){"use strict";n.r(e);var r=n(379),o=n.n(r),a=n(795),i=n.n(a),c=n(569),u=n.n(c),s=n(565),f=n.n(s),l=n(216),d=n.n(l),p=n(589),v=n.n(p),m=n(495),h={};h.styleTagTransform=v(),h.setAttributes=f(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=d();o()(m.Z,h);e.default=m.Z&&m.Z.locals?m.Z.locals:void 0},379:function(t){"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],c=0;c<t.length;c++){var u=t[c],s=r.base?u[0]+r.base:u[0],f=a[s]||0,l="".concat(s," ").concat(f);a[s]=f+1;var d=n(l),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var v=o(p,r);r.byIndex=c,e.splice(c,0,{identifier:l,updater:v,references:1})}i.push(l)}return i}function o(t,e){var n=e.domAPI(e);n.update(t);return function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var c=n(a[i]);e[c].references--}for(var u=r(t,o),s=0;s<a.length;s++){var f=n(a[s]);0===e[f].references&&(e[f].updater(),e.splice(f,1))}a=u}}},569:function(t){"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:function(t){"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:function(t,e,n){"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:function(t){"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:function(t){"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,{a:e}),e},n.d=function(t,e){for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},function(){n(692);var t=n(246),e=t(!1),r=t(!0),o=document.querySelector(".randombtn");function a(){var t=Array.from(document.querySelectorAll(".divRowcomputer"));function n(t){if(!e.gameBoard.checkGameEnd()&&!r.gameBoard.checkGameEnd()){o.style.display="none";var n=t.target.dataset.coordinates.split(",").map((function(t){return parseInt(t)}));e.attack(r,n),e.gameBoard.checkGameEnd()||r.gameBoard.checkGameEnd()||setTimeout((function(){r.attack(e)}),"150")}}o.style.display="block",t.forEach((function(t){return t.addEventListener("click",n,{once:!0})}))}o.addEventListener("click",(function(){return e.gameBoard.randomize()})),a();var i=document.querySelector(".buttonrestart");i.addEventListener("click",(function(){e.gameBoard.restart(),r.gameBoard.restart(),i.style.display="none",a()}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,